// Generated CODE, PLEASE EDIT WITH CARE 

var Warnings=require("Warnings");
var Printf=require("Printf");


var
 mk_a=
  function(f){return /* tuple */[0,"-a",/* Unit */[0,f]," Build a library"];};

var
 mk_absname=
  function(f)
   {return /* tuple */[0,
            "-absname",
            /* Unit */[0,f],
            " Show absolute filenames in error messages"];
    };

var
 mk_annot=
  function(f)
   {return /* tuple */[0,
            "-annot",
            /* Unit */[0,f],
            " Save information in <filename>.annot"];
    };

var
 mk_binannot=
  function(f)
   {return /* tuple */[0,
            "-bin-annot",
            /* Unit */[0,f],
            " Save typedtree in <filename>.cmt"];
    };

var
 mk_c=
  function(f)
   {return /* tuple */[0,"-c",/* Unit */[0,f]," Compile only (do not link)"];};

var
 mk_cc=
  function(f)
   {return /* tuple */[0,
            "-cc",
            /* String */[4,f],
            "<command>  Use <command> as the C compiler and linker"];
    };

var
 mk_cclib=
  function(f)
   {return /* tuple */[0,
            "-cclib",
            /* String */[4,f],
            "<opt>  Pass option <opt> to the C linker"];
    };

var
 mk_ccopt=
  function(f)
   {return /* tuple */[0,
            "-ccopt",
            /* String */[4,f],
            "<opt>  Pass option <opt> to the C compiler and linker"];
    };

var
 mk_compact=
  function(f)
   {return /* tuple */[0,
            "-compact",
            /* Unit */[0,f],
            " Optimize code size rather than speed"];
    };

var
 mk_compat_32=
  function(f)
   {return /* tuple */[0,
            "-compat-32",
            /* Unit */[0,f],
            " Check that generated bytecode can run on 32-bit platforms"];
    };

var
 mk_config=
  function(f)
   {return /* tuple */[0,
            "-config",
            /* Unit */[0,f],
            " Print configuration values and exit"];
    };

var
 mk_custom=
  function(f)
   {return /* tuple */[0,"-custom",/* Unit */[0,f]," Link in custom mode"];};

var
 mk_dllib=
  function(f)
   {return /* tuple */[0,
            "-dllib",
            /* String */[4,f],
            "<lib>  Use the dynamically-loaded library <lib>"];
    };

var
 mk_dllpath=
  function(f)
   {return /* tuple */[0,
            "-dllpath",
            /* String */[4,f],
            "<dir>  Add <dir> to the run-time search path for shared libraries"];
    };

var
 mk_dtypes=
  function(f)
   {return /* tuple */[0,
            "-dtypes",
            /* Unit */[0,f],
            " (deprecated) same as -annot"];
    };

var
 mk_for_pack_byt=
  function(f)
   {return /* tuple */[0,
            "-for-pack",
            /* String */[4,f],
            "<ident>  Generate code that can later be `packed' with\n     ocamlc -pack -o <ident>.cmo"];
    };

var
 mk_for_pack_opt=
  function(f)
   {return /* tuple */[0,
            "-for-pack",
            /* String */[4,f],
            "<ident>  Generate code that can later be `packed' with\n     ocamlopt -pack -o <ident>.cmx"];
    };

var
 mk_g_byt=
  function(f)
   {return /* tuple */[0,"-g",/* Unit */[0,f]," Save debugging information"];};

var
 mk_g_opt=
  function(f)
   {return /* tuple */[0,
            "-g",
            /* Unit */[0,f],
            " Record debugging information for exception backtrace"];
    };

var
 mk_i=
  function(f)
   {return /* tuple */[0,"-i",/* Unit */[0,f]," Print inferred interface"];};

var
 mk_I=
  function(f)
   {return /* tuple */[0,
            "-I",
            /* String */[4,f],
            "<dir>  Add <dir> to the list of include directories"];
    };

var
 mk_impl=
  function(f)
   {return /* tuple */[0,
            "-impl",
            /* String */[4,f],
            "<file>  Compile <file> as a .ml file"];
    };

var
 mk_init=
  function(f)
   {return /* tuple */[0,
            "-init",
            /* String */[4,f],
            "<file>  Load <file> instead of default init file"];
    };

var
 mk_inline=
  function(f)
   {return /* tuple */[0,
            "-inline",
            /* Int */[6,f],
            "<n>  Set aggressiveness of inlining to <n>"];
    };

var
 mk_intf=
  function(f)
   {return /* tuple */[0,
            "-intf",
            /* String */[4,f],
            "<file>  Compile <file> as a .mli file"];
    };

var
 mk_intf_suffix=
  function(f)
   {return /* tuple */[0,
            "-intf-suffix",
            /* String */[4,f],
            "<string>  Suffix for interface files (default: .mli)"];
    };

var
 mk_intf_suffix_2=
  function(f)
   {return /* tuple */[0,
            "-intf_suffix",
            /* String */[4,f],
            "<string>  (deprecated) same as -intf-suffix"];
    };

var
 mk_keep_docs=
  function(f)
   {return /* tuple */[0,
            "-keep-docs",
            /* Unit */[0,f],
            " Keep documentation strings in .cmi files"];
    };

var
 mk_keep_locs=
  function(f)
   {return /* tuple */[0,
            "-keep-locs",
            /* Unit */[0,f],
            " Keep locations in .cmi files"];
    };

var
 mk_labels=
  function(f)
   {return /* tuple */[0,
            "-labels",
            /* Unit */[0,f],
            " Use commuting label mode"];
    };

var
 mk_linkall=
  function(f)
   {return /* tuple */[0,
            "-linkall",
            /* Unit */[0,f],
            " Link all modules, even unused ones"];
    };

var
 mk_make_runtime=
  function(f)
   {return /* tuple */[0,
            "-make-runtime",
            /* Unit */[0,f],
            " Build a runtime system with given C objects and libraries"];
    };

var
 mk_make_runtime_2=
  function(f)
   {return /* tuple */[0,
            "-make_runtime",
            /* Unit */[0,f],
            " (deprecated) same as -make-runtime"];
    };

var
 mk_modern=
  function(f)
   {return /* tuple */[0,
            "-modern",
            /* Unit */[0,f],
            " (deprecated) same as -labels"];
    };

var
 mk_no_alias_deps=
  function(f)
   {return /* tuple */[0,
            "-no-alias-deps",
            /* Unit */[0,f],
            " Do not record dependencies for module aliases"];
    };

var
 mk_no_app_funct=
  function(f)
   {return /* tuple */[0,
            "-no-app-funct",
            /* Unit */[0,f],
            " Deactivate applicative functors"];
    };

var
 mk_no_check_prims=
  function(f)
   {return /* tuple */[0,
            "-no-check-prims",
            /* Unit */[0,f],
            " Do not check runtime for primitives"];
    };

var
 mk_no_float_const_prop=
  function(f)
   {return /* tuple */[0,
            "-no-float-const-prop",
            /* Unit */[0,f],
            " Deactivate constant propagation for floating-point operations"];
    };

var
 mk_noassert=
  function(f)
   {return /* tuple */[0,
            "-noassert",
            /* Unit */[0,f],
            " Do not compile assertion checks"];
    };

var
 mk_noautolink_byt=
  function(f)
   {return /* tuple */[0,
            "-noautolink",
            /* Unit */[0,f],
            " Do not automatically link C libraries specified in .cma files"];
    };

var
 mk_noautolink_opt=
  function(f)
   {return /* tuple */[0,
            "-noautolink",
            /* Unit */[0,f],
            " Do not automatically link C libraries specified in .cmxa files"];
    };

var
 mk_nodynlink=
  function(f)
   {return /* tuple */[0,
            "-nodynlink",
            /* Unit */[0,f],
            " Enable optimizations for code that will not be dynlinked"];
    };

var
 mk_noinit=
  function(f)
   {return /* tuple */[0,
            "-noinit",
            /* Unit */[0,f],
            " Do not load any init file"];
    };

var
 mk_nolabels=
  function(f)
   {return /* tuple */[0,
            "-nolabels",
            /* Unit */[0,f],
            " Ignore non-optional labels in types"];
    };

var
 mk_noprompt=
  function(f)
   {return /* tuple */[0,"-noprompt",/* Unit */[0,f]," Suppress all prompts"];
    };

var
 mk_nopromptcont=
  function(f)
   {return /* tuple */[0,
            "-nopromptcont",
            /* Unit */[0,f],
            " Suppress prompts for continuation lines of multi-line inputs"];
    };

var
 mk_nostdlib=
  function(f)
   {return /* tuple */[0,
            "-nostdlib",
            /* Unit */[0,f],
            " Do not add default directory to the list of include directories"];
    };

var
 mk_o=
  function(f)
   {return /* tuple */[0,
            "-o",
            /* String */[4,f],
            "<file>  Set output file name to <file>"];
    };

var
 mk_open=
  function(f)
   {return /* tuple */[0,
            "-open",
            /* String */[4,f],
            "<module>  Opens the module <module> before typing"];
    };

var
 mk_output_obj=
  function(f)
   {return /* tuple */[0,
            "-output-obj",
            /* Unit */[0,f],
            " Output an object file instead of an executable"];
    };

var
 mk_output_complete_obj=
  function(f)
   {return /* tuple */[0,
            "-output-complete-obj",
            /* Unit */[0,f],
            " Output an object file, including runtime, instead of an executable"];
    };

var
 mk_p=
  function(f)
   {return /* tuple */[0,
            "-p",
            /* Unit */[0,f],
            ' Compile and link with profiling support for "gprof"\n     (not supported on all platforms)'];
    };

var
 mk_pack_byt=
  function(f)
   {return /* tuple */[0,
            "-pack",
            /* Unit */[0,f],
            " Package the given .cmo files into one .cmo"];
    };

var
 mk_pack_opt=
  function(f)
   {return /* tuple */[0,
            "-pack",
            /* Unit */[0,f],
            " Package the given .cmx files into one .cmx"];
    };

var
 mk_pp=
  function(f)
   {return /* tuple */[0,
            "-pp",
            /* String */[4,f],
            "<command>  Pipe sources through preprocessor <command>"];
    };

var
 mk_ppx=
  function(f)
   {return /* tuple */[0,
            "-ppx",
            /* String */[4,f],
            "<command>  Pipe abstract syntax trees through preprocessor <command>"];
    };

var
 mk_principal=
  function(f)
   {return /* tuple */[0,
            "-principal",
            /* Unit */[0,f],
            " Check principality of type inference"];
    };

var
 mk_rectypes=
  function(f)
   {return /* tuple */[0,
            "-rectypes",
            /* Unit */[0,f],
            " Allow arbitrary recursive types"];
    };

var
 mk_runtime_variant=
  function(f)
   {return /* tuple */[0,
            "-runtime-variant",
            /* String */[4,f],
            "<str>  Use the <str> variant of the run-time system"];
    };

var
 mk_S=
  function(f)
   {return /* tuple */[0,
            "-S",
            /* Unit */[0,f],
            " Keep intermediate assembly file"];
    };

var
 mk_safe_string=
  function(f)
   {return /* tuple */[0,
            "-safe-string",
            /* Unit */[0,f],
            " Make strings immutable"];
    };

var
 mk_shared=
  function(f)
   {return /* tuple */[0,
            "-shared",
            /* Unit */[0,f],
            " Produce a dynlinkable plugin"];
    };

var
 mk_short_paths=
  function(f)
   {return /* tuple */[0,
            "-short-paths",
            /* Unit */[0,f],
            " Shorten paths in types"];
    };

var
 mk_stdin=
  function(f)
   {return /* tuple */[0,
            "-stdin",
            /* Unit */[0,f],
            " Read script from standard input"];
    };

var
 mk_strict_sequence=
  function(f)
   {return /* tuple */[0,
            "-strict-sequence",
            /* Unit */[0,f],
            " Left-hand part of a sequence must have type unit"];
    };

var
 mk_thread=
  function(f)
   {return /* tuple */[0,
            "-thread",
            /* Unit */[0,f],
            " Generate code that supports the system threads library"];
    };

var
 mk_unsafe=
  function(f)
   {return /* tuple */[0,
            "-unsafe",
            /* Unit */[0,f],
            " Do not compile bounds checking on array and string access"];
    };

var
 mk_unsafe_string=
  function(f)
   {return /* tuple */[0,
            "-unsafe-string",
            /* Unit */[0,f],
            " Make strings mutable (default)"];
    };

var
 mk_use_runtime=
  function(f)
   {return /* tuple */[0,
            "-use-runtime",
            /* String */[4,f],
            "<file>  Generate bytecode for the given runtime system"];
    };

var
 mk_use_runtime_2=
  function(f)
   {return /* tuple */[0,
            "-use_runtime",
            /* String */[4,f],
            "<file>  (deprecated) same as -use-runtime"];
    };

var
 mk_v=
  function(f)
   {return /* tuple */[0,
            "-v",
            /* Unit */[0,f],
            " Print compiler version and location of standard library and exit"];
    };

var
 mk_verbose=
  function(f)
   {return /* tuple */[0,
            "-verbose",
            /* Unit */[0,f],
            " Print calls to external commands"];
    };

var
 mk_version=
  function(f)
   {return /* tuple */[0,"-version",/* Unit */[0,f]," Print version and exit"];
    };

var
 mk_vmthread=
  function(f)
   {return /* tuple */[0,
            "-vmthread",
            /* Unit */[0,f],
            " Generate code that supports the threads library with VM-level\n     scheduling"];
    };

var
 mk_vnum=
  function(f)
   {return /* tuple */[0,
            "-vnum",
            /* Unit */[0,f],
            " Print version number and exit"];
    };

var
 mk_w=
  function(f)
   {return /* tuple */[0,
            "-w",
            /* String */[4,f],
            Printf["sprintf"]
             ([0,
               [11,
                "<list>  Enable or disable warnings according to <list>:\n        +<spec>   enable warnings in <spec>\n        -<spec>   disable warnings in <spec>\n        ",
                [17,
                 [2,60],
                 [11,
                  "spec>   enable warnings in <spec> and treat them as errors\n     <spec> can be:\n        <num>             a single warning number\n        <num1>..<num2>    a range of consecutive warning numbers\n        <letter>          a predefined set\n     default setting is ",
                  [3,0,0]]]],
               "<list>  Enable or disable warnings according to <list>:\n        +<spec>   enable warnings in <spec>\n        -<spec>   disable warnings in <spec>\n        @<spec>   enable warnings in <spec> and treat them as errors\n     <spec> can be:\n        <num>             a single warning number\n        <num1>..<num2>    a range of consecutive warning numbers\n        <letter>          a predefined set\n     default setting is %S"],
              Warnings["defaults_w"])];
    };

var
 mk_warn_error=
  function(f)
   {return /* tuple */[0,
            "-warn-error",
            /* String */[4,f],
            Printf["sprintf"]
             ([0,
               [11,
                "<list>  Enable or disable error status for warnings according\n     to <list>.  See option -w for the syntax of <list>.\n     Default setting is ",
                [3,0,0]],
               "<list>  Enable or disable error status for warnings according\n     to <list>.  See option -w for the syntax of <list>.\n     Default setting is %S"],
              Warnings["defaults_warn_error"])];
    };

var
 mk_warn_help=
  function(f)
   {return /* tuple */[0,
            "-warn-help",
            /* Unit */[0,f],
            " Show description of warning numbers"];
    };

var
 mk_where=
  function(f)
   {return /* tuple */[0,
            "-where",
            /* Unit */[0,f],
            " Print location of standard library and exit"];
    };

var
 mk_nopervasives=
  function(f)
   {return /* tuple */[0,"-nopervasives",/* Unit */[0,f]," (undocumented)"];};

var
 mk_use_prims=
  function(f)
   {return /* tuple */[0,
            "-use-prims",
            /* String */[4,f],
            "<file>  (undocumented)"];
    };

var
 mk_dparsetree=
  function(f)
   {return /* tuple */[0,"-dparsetree",/* Unit */[0,f]," (undocumented)"];};

var
 mk_dtypedtree=
  function(f)
   {return /* tuple */[0,"-dtypedtree",/* Unit */[0,f]," (undocumented)"];};

var
 mk_drawlambda=
  function(f)
   {return /* tuple */[0,"-drawlambda",/* Unit */[0,f]," (undocumented)"];};

var
 mk_dsource=
  function(f)
   {return /* tuple */[0,"-dsource",/* Unit */[0,f]," (undocumented)"];};

var
 mk_dlambda=
  function(f)
   {return /* tuple */[0,"-dlambda",/* Unit */[0,f]," (undocumented)"];};

var
 mk_dclambda=
  function(f)
   {return /* tuple */[0,"-dclambda",/* Unit */[0,f]," (undocumented)"];};

var
 mk_dinstr=
  function(f)
   {return /* tuple */[0,"-dinstr",/* Unit */[0,f]," (undocumented)"];};

var
 mk_dcmm=
  function(f)
   {return /* tuple */[0,"-dcmm",/* Unit */[0,f]," (undocumented)"];};

var
 mk_dsel=
  function(f)
   {return /* tuple */[0,"-dsel",/* Unit */[0,f]," (undocumented)"];};

var
 mk_dcombine=
  function(f)
   {return /* tuple */[0,"-dcombine",/* Unit */[0,f]," (undocumented)"];};

var
 mk_dcse=
  function(f)
   {return /* tuple */[0,"-dcse",/* Unit */[0,f]," (undocumented)"];};

var
 mk_dlive=
  function(f)
   {return /* tuple */[0,"-dlive",/* Unit */[0,f]," (undocumented)"];};

var
 mk_dspill=
  function(f)
   {return /* tuple */[0,"-dspill",/* Unit */[0,f]," (undocumented)"];};

var
 mk_dsplit=
  function(f)
   {return /* tuple */[0,"-dsplit",/* Unit */[0,f]," (undocumented)"];};

var
 mk_dinterf=
  function(f)
   {return /* tuple */[0,"-dinterf",/* Unit */[0,f]," (undocumented)"];};

var
 mk_dprefer=
  function(f)
   {return /* tuple */[0,"-dprefer",/* Unit */[0,f]," (undocumented)"];};

var
 mk_dalloc=
  function(f)
   {return /* tuple */[0,"-dalloc",/* Unit */[0,f]," (undocumented)"];};

var
 mk_dreload=
  function(f)
   {return /* tuple */[0,"-dreload",/* Unit */[0,f]," (undocumented)"];};

var
 mk_dscheduling=
  function(f)
   {return /* tuple */[0,"-dscheduling",/* Unit */[0,f]," (undocumented)"];};

var
 mk_dlinear=
  function(f)
   {return /* tuple */[0,"-dlinear",/* Unit */[0,f]," (undocumented)"];};

var
 mk_dstartup=
  function(f)
   {return /* tuple */[0,"-dstartup",/* Unit */[0,f]," (undocumented)"];};

var
 mk_opaque=
  function(f)
   {return /* tuple */[0,
            "-opaque",
            /* Unit */[0,f],
            " Does not generate cross-module optimization information\n     (reduces necessary recompilation on module change)"];
    };

var
 mk_strict_formats=
  function(f)
   {return /* tuple */[0,
            "-strict-formats",
            /* Unit */[0,f],
            " Reject invalid formats accepted by legacy implementations\n     (Warning: Invalid formats may behave differently from\n      previous OCaml versions, and will become always-rejected\n      in future OCaml versions. You should use this flag\n      to detect and fix invalid formats.)"];
    };

var
 mk__=
  function(f)
   {return /* tuple */[0,
            "-",
            /* String */[4,f],
            "<file>  Treat <file> as a file name (even if it starts with `-')"];
    };

var
 Make_bytecomp_options=
  function(F)
   {var
     list=
      /* :: */[0,
       mk_a(F[26]),
       /* :: */[0,
        mk_absname(F[1]),
        /* :: */[0,
         mk_annot(F[27]),
         /* :: */[0,
          mk_binannot(F[28]),
          /* :: */[0,
           mk_c(F[29]),
           /* :: */[0,
            mk_cc(F[30]),
            /* :: */[0,
             mk_cclib(F[31]),
             /* :: */[0,
              mk_ccopt(F[32]),
              /* :: */[0,
               mk_compat_32(F[59]),
               /* :: */[0,
                mk_config(F[33]),
                /* :: */[0,
                 mk_custom(F[60]),
                 /* :: */[0,
                  mk_custom(F[61]),
                  /* :: */[0,
                   mk_dllib(F[62]),
                   /* :: */[0,
                    mk_dllpath(F[63]),
                    /* :: */[0,
                     mk_dtypes(F[27]),
                     /* :: */[0,
                      mk_for_pack_byt(F[34]),
                      /* :: */[0,
                       mk_g_byt(F[35]),
                       /* :: */[0,
                        mk_i(F[36]),
                        /* :: */[0,
                         mk_I(F[2]),
                         /* :: */[0,
                          mk_impl(F[37]),
                          /* :: */[0,
                           mk_intf(F[38]),
                           /* :: */[0,
                            mk_intf_suffix(F[39]),
                            /* :: */[0,
                             mk_intf_suffix_2(F[39]),
                             /* :: */[0,
                              mk_keep_docs(F[40]),
                              /* :: */[0,
                               mk_keep_locs(F[41]),
                               /* :: */[0,
                                mk_labels(F[3]),
                                /* :: */[0,
                                 mk_linkall(F[42]),
                                 /* :: */[0,
                                  mk_make_runtime(F[64]),
                                  /* :: */[0,
                                   mk_make_runtime_2(F[64]),
                                   /* :: */[0,
                                    mk_modern(F[3]),
                                    /* :: */[0,
                                     mk_no_alias_deps(F[4]),
                                     /* :: */[0,
                                      mk_no_app_funct(F[5]),
                                      /* :: */[0,
                                       mk_no_check_prims(F[61]),
                                       /* :: */[0,
                                        mk_noassert(F[6]),
                                        /* :: */[0,
                                         mk_noautolink_byt(F[43]),
                                         /* :: */[0,
                                          mk_nolabels(F[7]),
                                          /* :: */[0,
                                           mk_nostdlib(F[8]),
                                           /* :: */[0,
                                            mk_o(F[44]),
                                            /* :: */[0,
                                             mk_open(F[9]),
                                             /* :: */[0,
                                              mk_output_obj(F[45]),
                                              /* :: */[0,
                                               mk_output_complete_obj(F[46]),
                                               /* :: */[0,
                                                mk_pack_byt(F[47]),
                                                /* :: */[0,
                                                 mk_pp(F[48]),
                                                 /* :: */[0,
                                                  mk_ppx(F[10]),
                                                  /* :: */[0,
                                                   mk_principal(F[49]),
                                                   /* :: */[0,
                                                    mk_rectypes(F[50]),
                                                    /* :: */[0,
                                                     mk_runtime_variant(F[51]),
                                                     /* :: */[0,
                                                      mk_safe_string(F[52]),
                                                      /* :: */[0,
                                                       mk_short_paths(F[53]),
                                                       /* :: */[0,
                                                        mk_strict_sequence(F[11]),
                                                        /* :: */[0,
                                                         mk_strict_formats(F[12]),
                                                         /* :: */[0,
                                                          mk_thread(F[54]),
                                                          /* :: */[0,
                                                           mk_unsafe(F[13]),
                                                           /* :: */[0,
                                                            mk_unsafe_string(F[14]),
                                                            /* :: */[0,
                                                             mk_use_runtime(F[66]),
                                                             /* :: */[0,
                                                              mk_use_runtime_2(F[66]),
                                                              /* :: */[0,
                                                               mk_v(F[55]),
                                                               /* :: */[0,
                                                                mk_verbose(F[56]),
                                                                /* :: */[0,
                                                                 mk_version(F[15]),
                                                                 /* :: */[0,
                                                                  mk_vmthread(F[65]),
                                                                  /* :: */[0,
                                                                   mk_vnum(F[16]),
                                                                   /* :: */[0,
                                                                    mk_w(F[17]),
                                                                    /* :: */[0,
                                                                     mk_warn_error(F[18]),
                                                                     /* :: */[0,
                                                                      mk_warn_help(F[19]),
                                                                      /* :: */[0,
                                                                       mk_where(F[57]),
                                                                       /* :: */[0,
                                                                        mk__(F[25]),
                                                                        /* :: */[0,
                                                                         mk_nopervasives(F[58]),
                                                                         /* :: */[0,
                                                                          mk_use_prims(F[68]),
                                                                          /* :: */[0,
                                                                           mk_dsource(F[20]),
                                                                           /* :: */[0,
                                                                            mk_dparsetree(F[21]),
                                                                            /* :: */[0,
                                                                             mk_dtypedtree(F[22]),
                                                                             /* :: */[0,
                                                                              mk_drawlambda(F[23]),
                                                                              /* :: */[0,mk_dlambda(F[24]),/* :: */[0,mk_dinstr(F[67]),0]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]];
    
    return [0,list];
    };

var
 Make_bytetop_options=
  function(F)
   {var
     list=
      /* :: */[0,
       mk_absname(F[1]),
       /* :: */[0,
        mk_I(F[2]),
        /* :: */[0,
         mk_init(F[30]),
         /* :: */[0,
          mk_labels(F[3]),
          /* :: */[0,
           mk_no_alias_deps(F[4]),
           /* :: */[0,
            mk_no_app_funct(F[5]),
            /* :: */[0,
             mk_noassert(F[6]),
             /* :: */[0,
              mk_noinit(F[31]),
              /* :: */[0,
               mk_nolabels(F[7]),
               /* :: */[0,
                mk_noprompt(F[32]),
                /* :: */[0,
                 mk_nopromptcont(F[33]),
                 /* :: */[0,
                  mk_nostdlib(F[8]),
                  /* :: */[0,
                   mk_open(F[9]),
                   /* :: */[0,
                    mk_ppx(F[10]),
                    /* :: */[0,
                     mk_principal(F[11]),
                     /* :: */[0,
                      mk_rectypes(F[12]),
                      /* :: */[0,
                       mk_safe_string(F[13]),
                       /* :: */[0,
                        mk_short_paths(F[14]),
                        /* :: */[0,
                         mk_stdin(F[34]),
                         /* :: */[0,
                          mk_strict_sequence(F[15]),
                          /* :: */[0,
                           mk_strict_formats(F[16]),
                           /* :: */[0,
                            mk_unsafe(F[17]),
                            /* :: */[0,
                             mk_unsafe_string(F[18]),
                             /* :: */[0,
                              mk_version(F[19]),
                              /* :: */[0,
                               mk_vnum(F[20]),
                               /* :: */[0,
                                mk_w(F[21]),
                                /* :: */[0,
                                 mk_warn_error(F[22]),
                                 /* :: */[0,
                                  mk_warn_help(F[23]),
                                  /* :: */[0,
                                   mk__(F[29]),
                                   /* :: */[0,
                                    mk_dsource(F[24]),
                                    /* :: */[0,
                                     mk_dparsetree(F[25]),
                                     /* :: */[0,
                                      mk_dtypedtree(F[26]),
                                      /* :: */[0,
                                       mk_drawlambda(F[27]),
                                       /* :: */[0,mk_dlambda(F[28]),/* :: */[0,mk_dinstr(F[35]),0]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]];
    
    return [0,list];
    };

var
 Make_optcomp_options=
  function(F)
   {var
     list=
      /* :: */[0,
       mk_a(F[26]),
       /* :: */[0,
        mk_absname(F[1]),
        /* :: */[0,
         mk_annot(F[27]),
         /* :: */[0,
          mk_binannot(F[28]),
          /* :: */[0,
           mk_c(F[29]),
           /* :: */[0,
            mk_cc(F[30]),
            /* :: */[0,
             mk_cclib(F[31]),
             /* :: */[0,
              mk_ccopt(F[32]),
              /* :: */[0,
               mk_compact(F[58]),
               /* :: */[0,
                mk_config(F[33]),
                /* :: */[0,
                 mk_dtypes(F[27]),
                 /* :: */[0,
                  mk_for_pack_opt(F[34]),
                  /* :: */[0,
                   mk_g_opt(F[35]),
                   /* :: */[0,
                    mk_i(F[36]),
                    /* :: */[0,
                     mk_I(F[2]),
                     /* :: */[0,
                      mk_impl(F[37]),
                      /* :: */[0,
                       mk_inline(F[59]),
                       /* :: */[0,
                        mk_intf(F[38]),
                        /* :: */[0,
                         mk_intf_suffix(F[39]),
                         /* :: */[0,
                          mk_keep_docs(F[40]),
                          /* :: */[0,
                           mk_keep_locs(F[41]),
                           /* :: */[0,
                            mk_labels(F[3]),
                            /* :: */[0,
                             mk_linkall(F[42]),
                             /* :: */[0,
                              mk_no_alias_deps(F[4]),
                              /* :: */[0,
                               mk_no_app_funct(F[5]),
                               /* :: */[0,
                                mk_no_float_const_prop(F[75]),
                                /* :: */[0,
                                 mk_noassert(F[6]),
                                 /* :: */[0,
                                  mk_noautolink_opt(F[43]),
                                  /* :: */[0,
                                   mk_nodynlink(F[76]),
                                   /* :: */[0,
                                    mk_nolabels(F[7]),
                                    /* :: */[0,
                                     mk_nostdlib(F[8]),
                                     /* :: */[0,
                                      mk_o(F[44]),
                                      /* :: */[0,
                                       mk_open(F[9]),
                                       /* :: */[0,
                                        mk_output_obj(F[45]),
                                        /* :: */[0,
                                         mk_output_complete_obj(F[46]),
                                         /* :: */[0,
                                          mk_p(F[77]),
                                          /* :: */[0,
                                           mk_pack_opt(F[47]),
                                           /* :: */[0,
                                            mk_pp(F[78]),
                                            /* :: */[0,
                                             mk_ppx(F[10]),
                                             /* :: */[0,
                                              mk_principal(F[48]),
                                              /* :: */[0,
                                               mk_rectypes(F[49]),
                                               /* :: */[0,
                                                mk_runtime_variant(F[50]),
                                                /* :: */[0,
                                                 mk_S(F[79]),
                                                 /* :: */[0,
                                                  mk_safe_string(F[51]),
                                                  /* :: */[0,
                                                   mk_shared(F[80]),
                                                   /* :: */[0,
                                                    mk_short_paths(F[52]),
                                                    /* :: */[0,
                                                     mk_strict_sequence(F[11]),
                                                     /* :: */[0,
                                                      mk_strict_formats(F[12]),
                                                      /* :: */[0,
                                                       mk_thread(F[53]),
                                                       /* :: */[0,
                                                        mk_unsafe(F[13]),
                                                        /* :: */[0,
                                                         mk_unsafe_string(F[14]),
                                                         /* :: */[0,
                                                          mk_v(F[54]),
                                                          /* :: */[0,
                                                           mk_verbose(F[55]),
                                                           /* :: */[0,
                                                            mk_version(F[15]),
                                                            /* :: */[0,
                                                             mk_vnum(F[16]),
                                                             /* :: */[0,
                                                              mk_w(F[17]),
                                                              /* :: */[0,
                                                               mk_warn_error(F[18]),
                                                               /* :: */[0,
                                                                mk_warn_help(F[19]),
                                                                /* :: */[0,
                                                                 mk_where(F[56]),
                                                                 /* :: */[0,
                                                                  mk__(F[25]),
                                                                  /* :: */[0,
                                                                   mk_nopervasives(F[57]),
                                                                   /* :: */[0,
                                                                    mk_dsource(F[20]),
                                                                    /* :: */[0,
                                                                     mk_dparsetree(F[21]),
                                                                     /* :: */[0,
                                                                      mk_dtypedtree(F[22]),
                                                                      /* :: */[0,
                                                                       mk_drawlambda(F[23]),
                                                                       /* :: */[0,
                                                                        mk_dlambda(F[24]),
                                                                        /* :: */[0,
                                                                         mk_dclambda(F[60]),
                                                                         /* :: */[0,
                                                                          mk_dcmm(F[61]),
                                                                          /* :: */[0,
                                                                           mk_dsel(F[62]),
                                                                           /* :: */[0,
                                                                            mk_dcombine(F[63]),
                                                                            /* :: */[0,
                                                                             mk_dcse(F[64]),
                                                                             /* :: */[0,
                                                                              mk_dlive(F[65]),
                                                                              /* :: */[0,
                                                                               mk_dspill(F[66]),
                                                                               /* :: */[0,
                                                                                mk_dsplit(F[67]),
                                                                                /* :: */[0,
                                                                                 mk_dinterf(F[68]),
                                                                                 /* :: */[0,
                                                                                  mk_dprefer(F[69]),
                                                                                  /* :: */[0,
                                                                                   mk_dalloc(F[70]),
                                                                                   /* :: */[0,
                                                                                    mk_dreload(F[71]),
                                                                                    /* :: */[0,
                                                                                     mk_dscheduling(F[72]),
                                                                                     /* :: */[0,
                                                                                      mk_dlinear(F[73]),
                                                                                      /* :: */[0,
                                                                                       mk_dstartup(F[74]),
                                                                                       /* :: */[0,mk_opaque(F[81]),0]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]];
    
    return [0,list];
    };

var
 Make_opttop_options=
  function(F)
   {var
     list=
      /* :: */[0,
       mk_absname(F[1]),
       /* :: */[0,
        mk_compact(F[30]),
        /* :: */[0,
         mk_I(F[2]),
         /* :: */[0,
          mk_init(F[47]),
          /* :: */[0,
           mk_inline(F[31]),
           /* :: */[0,
            mk_labels(F[3]),
            /* :: */[0,
             mk_no_alias_deps(F[4]),
             /* :: */[0,
              mk_no_app_funct(F[5]),
              /* :: */[0,
               mk_noassert(F[6]),
               /* :: */[0,
                mk_noinit(F[48]),
                /* :: */[0,
                 mk_nolabels(F[7]),
                 /* :: */[0,
                  mk_noprompt(F[49]),
                  /* :: */[0,
                   mk_nopromptcont(F[50]),
                   /* :: */[0,
                    mk_nostdlib(F[8]),
                    /* :: */[0,
                     mk_open(F[9]),
                     /* :: */[0,
                      mk_ppx(F[10]),
                      /* :: */[0,
                       mk_principal(F[11]),
                       /* :: */[0,
                        mk_rectypes(F[12]),
                        /* :: */[0,
                         mk_S(F[51]),
                         /* :: */[0,
                          mk_safe_string(F[13]),
                          /* :: */[0,
                           mk_short_paths(F[14]),
                           /* :: */[0,
                            mk_stdin(F[52]),
                            /* :: */[0,
                             mk_strict_sequence(F[15]),
                             /* :: */[0,
                              mk_strict_formats(F[16]),
                              /* :: */[0,
                               mk_unsafe(F[17]),
                               /* :: */[0,
                                mk_unsafe_string(F[18]),
                                /* :: */[0,
                                 mk_version(F[19]),
                                 /* :: */[0,
                                  mk_vnum(F[20]),
                                  /* :: */[0,
                                   mk_w(F[21]),
                                   /* :: */[0,
                                    mk_warn_error(F[22]),
                                    /* :: */[0,
                                     mk_warn_help(F[23]),
                                     /* :: */[0,
                                      mk__(F[29]),
                                      /* :: */[0,
                                       mk_dsource(F[24]),
                                       /* :: */[0,
                                        mk_dparsetree(F[25]),
                                        /* :: */[0,
                                         mk_dtypedtree(F[26]),
                                         /* :: */[0,
                                          mk_drawlambda(F[27]),
                                          /* :: */[0,
                                           mk_dclambda(F[32]),
                                           /* :: */[0,
                                            mk_dcmm(F[33]),
                                            /* :: */[0,
                                             mk_dsel(F[34]),
                                             /* :: */[0,
                                              mk_dcombine(F[35]),
                                              /* :: */[0,
                                               mk_dcse(F[36]),
                                               /* :: */[0,
                                                mk_dlive(F[37]),
                                                /* :: */[0,
                                                 mk_dspill(F[38]),
                                                 /* :: */[0,
                                                  mk_dsplit(F[39]),
                                                  /* :: */[0,
                                                   mk_dinterf(F[40]),
                                                   /* :: */[0,
                                                    mk_dprefer(F[41]),
                                                    /* :: */[0,
                                                     mk_dalloc(F[42]),
                                                     /* :: */[0,
                                                      mk_dreload(F[43]),
                                                      /* :: */[0,
                                                       mk_dscheduling(F[44]),
                                                       /* :: */[0,
                                                        mk_dlinear(F[45]),
                                                        /* :: */[0,mk_dstartup(F[46]),0]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]];
    
    return [0,list];
    };

var
 Make_ocamldoc_options=
  function(F)
   {var
     list=
      /* :: */[0,
       mk_absname(F[1]),
       /* :: */[0,
        mk_I(F[2]),
        /* :: */[0,
         mk_impl(F[26]),
         /* :: */[0,
          mk_intf(F[27]),
          /* :: */[0,
           mk_intf_suffix(F[28]),
           /* :: */[0,
            mk_intf_suffix_2(F[28]),
            /* :: */[0,
             mk_labels(F[3]),
             /* :: */[0,
              mk_modern(F[3]),
              /* :: */[0,
               mk_no_alias_deps(F[4]),
               /* :: */[0,
                mk_no_app_funct(F[5]),
                /* :: */[0,
                 mk_noassert(F[6]),
                 /* :: */[0,
                  mk_nolabels(F[7]),
                  /* :: */[0,
                   mk_nostdlib(F[8]),
                   /* :: */[0,
                    mk_open(F[9]),
                    /* :: */[0,
                     mk_pp(F[29]),
                     /* :: */[0,
                      mk_ppx(F[10]),
                      /* :: */[0,
                       mk_principal(F[30]),
                       /* :: */[0,
                        mk_rectypes(F[31]),
                        /* :: */[0,
                         mk_safe_string(F[32]),
                         /* :: */[0,
                          mk_short_paths(F[33]),
                          /* :: */[0,
                           mk_strict_sequence(F[11]),
                           /* :: */[0,
                            mk_strict_formats(F[12]),
                            /* :: */[0,
                             mk_thread(F[34]),
                             /* :: */[0,
                              mk_unsafe_string(F[14]),
                              /* :: */[0,
                               mk_v(F[35]),
                               /* :: */[0,
                                mk_verbose(F[36]),
                                /* :: */[0,
                                 mk_version(F[15]),
                                 /* :: */[0,
                                  mk_vmthread(F[37]),
                                  /* :: */[0,
                                   mk_vnum(F[16]),
                                   /* :: */[0,mk_w(F[17]),/* :: */[0,mk__(F[25]),0]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]];
    
    return [0,list];
    };

module["exports"]=
{"Make_bytecomp_options":Make_bytecomp_options,
 "Make_bytetop_options":Make_bytetop_options,
 "Make_optcomp_options":Make_optcomp_options,
 "Make_opttop_options":Make_opttop_options,
 "Make_ocamldoc_options":Make_ocamldoc_options};

